package com.longfe;import org.w3c.dom.*;import org.xml.sax.SAXException;import javax.xml.parsers.DocumentBuilder;import javax.xml.parsers.DocumentBuilderFactory;import javax.xml.parsers.ParserConfigurationException;import java.io.File;import java.io.IOException;import java.util.ArrayList;import java.util.List;public class XMLScriptBuilder {	public static void main(String[] args) throws Exception {		File file = new File("/Users/shenlongfei/Desktop/flexmark-ext-ext-module/testdom/src/main/resources/demo.xml");		(new XMLScriptBuilder()).readXML(file);	}	public void readXML(File file) throws Exception {		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();		try {			DocumentBuilder builder = factory.newDocumentBuilder();			Document doc = builder.parse(file);			Element element = doc.getDocumentElement();			parseScriptNode(element);		} catch (ParserConfigurationException e) {			e.printStackTrace();		} catch (SAXException e) {			e.printStackTrace();		} catch (IOException e) {			e.printStackTrace();		}	}	public UpdateSqlNode parseScriptNode(Node node) throws Exception {			String nodeName = node.getNodeName();			NamedNodeMap nnmap = node.getAttributes();			//如果是update标签,解析成UpdateSqlNode			UpdateSqlNode updateSqlNode = new UpdateSqlNode();			if ("update".equals(nodeName)) {				if (nnmap.getLength() == 0 || nnmap.getNamedItem("id") == null || nnmap.getNamedItem("parameterType") == null) {					throw new Exception("id or parameterType is empty!");				} else {					String id = nnmap.getNamedItem("id").getNodeValue();					String parameterType = nnmap.getNamedItem("parameterType").getNodeValue();					updateSqlNode.setId(id);					updateSqlNode.setParameterType(parameterType);				}				updateSqlNode.setSqlNodes(parseDynamicTags(node));			}		return updateSqlNode;	}	public List<SqlNode> parseDynamicTags(Node node) throws Exception {		List<SqlNode> contents = new ArrayList<SqlNode>();		NodeList children = node.getChildNodes();		for (int i = 0; i < children.getLength(); i++) {			Node child = children.item(i);			if (child.getNodeType() == Node.CDATA_SECTION_NODE || child.getNodeType() == Node.TEXT_NODE) {				TextSqlNode textSqlNode = new TextSqlNode();				textSqlNode.setContent(child.getTextContent());				contents.add(textSqlNode);			} else if (child.getNodeType() == Node.ELEMENT_NODE) {				String nodeName = child.getNodeName();				NamedNodeMap nnmap = child.getAttributes();				//如果是if标签,解析成IfSqlNode				if ("if".equals(nodeName)) {					IfSqlNode ifSqlNode = new IfSqlNode();					if (nnmap.getLength() == 0 || nnmap.getNamedItem("test") == null) {						throw new Exception("test is empty!");					} else {						String test = nnmap.getNamedItem("test").getNodeValue();						ifSqlNode.setTest(test);						List<SqlNode> ifSqlNodeContents = parseDynamicTags(child);						ifSqlNode.setSqlNodes(ifSqlNodeContents);						contents.add(ifSqlNode);					}				}			}		}		return contents;	}}class SqlNode {}class UpdateSqlNode extends SqlNode {	String id;	String parameterType;	List<SqlNode> sqlNodes;	public String getId() {		return id;	}	public void setId(String id) {		this.id = id;	}	public String getParameterType() {		return parameterType;	}	public void setParameterType(String parameterType) {		this.parameterType = parameterType;	}	public List<SqlNode> getSqlNodes() {		return sqlNodes;	}	public void setSqlNodes(List<SqlNode> sqlNodes) {		this.sqlNodes = sqlNodes;	}}class TextSqlNode extends SqlNode {	String content;	List<SqlNode> sqlNodes;	public String getContent() {		return content;	}	public void setContent(String content) {		this.content = content;	}	public List<SqlNode> getSqlNodes() {		return sqlNodes;	}	public void setSqlNodes(List<SqlNode> sqlNodes) {		this.sqlNodes = sqlNodes;	}}class IfSqlNode extends SqlNode {	String test;	List<SqlNode> sqlNodes;	public String getTest() {		return test;	}	public void setTest(String test) {		this.test = test;	}	public List<SqlNode> getSqlNodes() {		return sqlNodes;	}	public void setSqlNodes(List<SqlNode> sqlNodes) {		this.sqlNodes = sqlNodes;	}}